// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"douyin/v1/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetPublishListByUser":  kitex.NewMethodInfo(getPublishListByUserHandler, newVideoServiceGetPublishListByUserArgs, newVideoServiceGetPublishListByUserResult, false),
		"GetVideosByLastTime":   kitex.NewMethodInfo(getVideosByLastTimeHandler, newVideoServiceGetVideosByLastTimeArgs, newVideoServiceGetVideosByLastTimeResult, false),
		"PublishVideo":          kitex.NewMethodInfo(publishVideoHandler, newVideoServicePublishVideoArgs, newVideoServicePublishVideoResult, false),
		"FavoriteByUser":        kitex.NewMethodInfo(favoriteByUserHandler, newVideoServiceFavoriteByUserArgs, newVideoServiceFavoriteByUserResult, false),
		"GetFavoriteListBYUser": kitex.NewMethodInfo(getFavoriteListBYUserHandler, newVideoServiceGetFavoriteListBYUserArgs, newVideoServiceGetFavoriteListBYUserResult, false),
		"GetCommentListByVideo": kitex.NewMethodInfo(getCommentListByVideoHandler, newVideoServiceGetCommentListByVideoArgs, newVideoServiceGetCommentListByVideoResult, false),
		"PostComment":           kitex.NewMethodInfo(postCommentHandler, newVideoServicePostCommentArgs, newVideoServicePostCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func getPublishListByUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetPublishListByUserArgs)
	realResult := result.(*video.VideoServiceGetPublishListByUserResult)
	success, err := handler.(video.VideoService).GetPublishListByUser(ctx, realArg.UserId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetPublishListByUserArgs() interface{} {
	return video.NewVideoServiceGetPublishListByUserArgs()
}

func newVideoServiceGetPublishListByUserResult() interface{} {
	return video.NewVideoServiceGetPublishListByUserResult()
}

func getVideosByLastTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetVideosByLastTimeArgs)
	realResult := result.(*video.VideoServiceGetVideosByLastTimeResult)
	success, err := handler.(video.VideoService).GetVideosByLastTime(ctx, realArg.LastTime, realArg.UserId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideosByLastTimeArgs() interface{} {
	return video.NewVideoServiceGetVideosByLastTimeArgs()
}

func newVideoServiceGetVideosByLastTimeResult() interface{} {
	return video.NewVideoServiceGetVideosByLastTimeResult()
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishVideoArgs)
	realResult := result.(*video.VideoServicePublishVideoResult)
	success, err := handler.(video.VideoService).PublishVideo(ctx, realArg.PublishedVideo)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishVideoArgs() interface{} {
	return video.NewVideoServicePublishVideoArgs()
}

func newVideoServicePublishVideoResult() interface{} {
	return video.NewVideoServicePublishVideoResult()
}

func favoriteByUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFavoriteByUserArgs)
	realResult := result.(*video.VideoServiceFavoriteByUserResult)
	success, err := handler.(video.VideoService).FavoriteByUser(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteByUserArgs() interface{} {
	return video.NewVideoServiceFavoriteByUserArgs()
}

func newVideoServiceFavoriteByUserResult() interface{} {
	return video.NewVideoServiceFavoriteByUserResult()
}

func getFavoriteListBYUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetFavoriteListBYUserArgs)
	realResult := result.(*video.VideoServiceGetFavoriteListBYUserResult)
	success, err := handler.(video.VideoService).GetFavoriteListBYUser(ctx, realArg.UserId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFavoriteListBYUserArgs() interface{} {
	return video.NewVideoServiceGetFavoriteListBYUserArgs()
}

func newVideoServiceGetFavoriteListBYUserResult() interface{} {
	return video.NewVideoServiceGetFavoriteListBYUserResult()
}

func getCommentListByVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetCommentListByVideoArgs)
	realResult := result.(*video.VideoServiceGetCommentListByVideoResult)
	success, err := handler.(video.VideoService).GetCommentListByVideo(ctx, realArg.VideoId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetCommentListByVideoArgs() interface{} {
	return video.NewVideoServiceGetCommentListByVideoArgs()
}

func newVideoServiceGetCommentListByVideoResult() interface{} {
	return video.NewVideoServiceGetCommentListByVideoResult()
}

func postCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePostCommentArgs)
	realResult := result.(*video.VideoServicePostCommentResult)
	success, err := handler.(video.VideoService).PostComment(ctx, realArg.CommentActionRequest)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePostCommentArgs() interface{} {
	return video.NewVideoServicePostCommentArgs()
}

func newVideoServicePostCommentResult() interface{} {
	return video.NewVideoServicePostCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetPublishListByUser(ctx context.Context, userId int64) (r *video.PublishListResponse, err error) {
	var _args video.VideoServiceGetPublishListByUserArgs
	_args.UserId = userId
	var _result video.VideoServiceGetPublishListByUserResult
	if err = p.c.Call(ctx, "GetPublishListByUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideosByLastTime(ctx context.Context, lastTime int64, userId int64) (r *video.VideoFeedResponse, err error) {
	var _args video.VideoServiceGetVideosByLastTimeArgs
	_args.LastTime = lastTime
	_args.UserId = userId
	var _result video.VideoServiceGetVideosByLastTimeResult
	if err = p.c.Call(ctx, "GetVideosByLastTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideo(ctx context.Context, publishedVideo *video.Video) (r *video.BaseResp, err error) {
	var _args video.VideoServicePublishVideoArgs
	_args.PublishedVideo = publishedVideo
	var _result video.VideoServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteByUser(ctx context.Context, request *video.FavoriteActionRequest) (r *video.BaseResp, err error) {
	var _args video.VideoServiceFavoriteByUserArgs
	_args.Request = request
	var _result video.VideoServiceFavoriteByUserResult
	if err = p.c.Call(ctx, "FavoriteByUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteListBYUser(ctx context.Context, userId int64) (r *video.FavoriteListResponse, err error) {
	var _args video.VideoServiceGetFavoriteListBYUserArgs
	_args.UserId = userId
	var _result video.VideoServiceGetFavoriteListBYUserResult
	if err = p.c.Call(ctx, "GetFavoriteListBYUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentListByVideo(ctx context.Context, videoId int64) (r *video.CommentListResponse, err error) {
	var _args video.VideoServiceGetCommentListByVideoArgs
	_args.VideoId = videoId
	var _result video.VideoServiceGetCommentListByVideoResult
	if err = p.c.Call(ctx, "GetCommentListByVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PostComment(ctx context.Context, commentActionRequest *video.CommentActionRequest) (r *video.CommentActionResponse, err error) {
	var _args video.VideoServicePostCommentArgs
	_args.CommentActionRequest = commentActionRequest
	var _result video.VideoServicePostCommentResult
	if err = p.c.Call(ctx, "PostComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
